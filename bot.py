# –°–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
import sys
import random
import logging
import asyncio
import pytz
from datetime import datetime, timedelta

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
import aiohttp
import aiofiles

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Telegram
import telegram
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, JobQueue
from telegram.error import Conflict, RetryAfter, TimedOut

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Reddit
import asyncpraw
import asyncprawcore

# –†–∞–±–æ—Ç–∞ —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
from dotenv import load_dotenv
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot_debug.log',
    filemode='a'
)
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.setLevel(logging.DEBUG)
logger.handlers.clear()

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ Telegram
async def error_handler(update: object, context: CallbackContext):
    try:
        raise context.error
    except Conflict:
        logger.error("–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    except RetryAfter as e:
        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç. –û–∂–∏–¥–∞–Ω–∏–µ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)
    except TimedOut:
        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
async def check_url_availability(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.head(url, timeout=10) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL {url}: {e}")
        return False

# –†–∞–±–æ—Ç–∞ —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
from dotenv import load_dotenv
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot_debug.log',
    filemode='a'
)
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.setLevel(logging.DEBUG)
logger.handlers.clear()

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
file_handler = logging.FileHandler('bot_debug.log', mode='w', encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
REDDIT_CLIENT_ID = os.getenv('REDDIT_CLIENT_ID')
REDDIT_CLIENT_SECRET = os.getenv('REDDIT_CLIENT_SECRET')
REDDIT_USER_AGENT = os.getenv('REDDIT_USER_AGENT')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤
SENT_MEMES = set()
MAX_SENT_MEMES = 500  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–º–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏

async def get_random_meme(subreddit_names=None, limit=200):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AsyncPRAW
    """
    try:
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–º–∞")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
        import socket
        import ssl
        
        def check_internet_connection():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
                socket.gethostbyname('www.reddit.com')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                context = ssl.create_default_context()
                with socket.create_connection(("www.reddit.com", 443)) as sock:
                    with context.wrap_socket(sock, server_hostname="www.reddit.com") as secure_sock:
                        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Reddit")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                return False
        
        if not check_internet_connection():
            logger.warning("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Reddit")
            return None
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ Reddit API
        logger.info(f"Reddit Client ID: {os.getenv('REDDIT_CLIENT_ID', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')[:5]}...")
        logger.info(f"Reddit Client Secret: {'*' * 10}")
        logger.info(f"Reddit User Agent: {os.getenv('REDDIT_USER_AGENT', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
        
        try:
            reddit = asyncpraw.Reddit(
                client_id=os.getenv('REDDIT_CLIENT_ID'),
                client_secret=os.getenv('REDDIT_CLIENT_SECRET'),
                user_agent=os.getenv('REDDIT_USER_AGENT', 'TelegramMemeBot/1.5')
            )
        except Exception as auth_error:
            logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Reddit: {auth_error}")
            return None
        
        if not subreddit_names:
            subreddit_names = [
                'memes', 'dankmemes', 'funny', 'ru_memes', 'Pikabu'
            ]
        
        logger.info(f"–°–ø–∏—Å–æ–∫ —Å—É–±-—Ä–µ–¥–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {subreddit_names}")
        
        all_memes = []
        for subreddit_name in subreddit_names:
            try:
                subreddit = await reddit.subreddit(subreddit_name)
                hot_memes = []
                async for post in subreddit.hot(limit=limit):
                    if post.url.endswith(('.jpg', '.jpeg', '.png', '.gif')):
                        hot_memes.append(post)
                
                all_memes.extend(hot_memes)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(hot_memes)} –º–µ–º–æ–≤ –∏–∑ {subreddit_name}")
            except asyncprawcore.exceptions.Forbidden as forbidden_error:
                logger.error(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ {subreddit_name}: {forbidden_error}")
            except asyncprawcore.exceptions.NotFound as not_found_error:
                logger.error(f"‚ùå –°—É–±-—Ä–µ–¥–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω {subreddit_name}: {not_found_error}")
            except asyncprawcore.exceptions.RequestException as request_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {subreddit_name}: {request_error}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–æ–≤ –∏–∑ {subreddit_name}: {e}", exc_info=True)
        
        logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –º–µ–º–æ–≤: {len(all_memes)}")
        
        valid_memes = [
            meme for meme in all_memes 
            if meme.url not in SENT_MEMES
        ]
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –º–µ–º–æ–≤: {len(valid_memes)}")
        
        if not valid_memes:
            logger.warning("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤")
            SENT_MEMES.clear()
            valid_memes = all_memes
        
        if not valid_memes:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ–º—ã")
            return None
        
        selected_meme = random.choice(valid_memes)
        
        SENT_MEMES.add(selected_meme.url)
        
        if len(SENT_MEMES) > MAX_SENT_MEMES:
            logger.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤, –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
            SENT_MEMES.clear()
        
        logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –º–µ–º: {selected_meme.title} –∏–∑ {selected_meme.subreddit}")
        
        return {
            'title': selected_meme.title,
            'url': selected_meme.url,
            'author': selected_meme.author,
            'subreddit': selected_meme.subreddit
        }
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_random_meme: {e}", exc_info=True)
        return None
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é Reddit
        try:
            await reddit.close()
        except Exception:
            pass

async def send_meme_to_channel(context: CallbackContext):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ –≤ –∫–∞–Ω–∞–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
    """
    try:
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
        try:
            channel_info = await context.bot.get_chat(CHANNEL_ID)
            logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ: {channel_info}")
        except Exception as channel_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {channel_error}")
            return
        
        meme = await get_random_meme()
        
        if not meme:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º")
            return
        
        caption = f"{meme['title']}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"
        
        try:
            logger.info(f"üì∏ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º –≤ –∫–∞–Ω–∞–ª: {CHANNEL_ID}")
            logger.info(f"üîó URL –º–µ–º–∞: {meme['url']}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(meme['url']) as response:
                        if response.status != 200:
                            logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {meme['url']} (—Å—Ç–∞—Ç—É—Å: {response.status})")
                            return
            except Exception as url_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL: {url_error}")
                return
            
            await context.bot.send_photo(
                chat_id=CHANNEL_ID, 
                photo=meme['url'], 
                caption=caption
            )
            
            logger.info(f"‚úÖ –ú–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ {meme['subreddit']}")
        except Exception as send_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞ –≤ –∫–∞–Ω–∞–ª: {send_error}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                admin_id = os.getenv('ADMIN_USER_ID')
                logger.info(f"üìß –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_id}")
                
                await context.bot.send_message(
                    chat_id=admin_id, 
                    text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º –≤ –∫–∞–Ω–∞–ª:\n{send_error}\n\n"
                         f"–ú–µ–º: {meme['url']}\n"
                         f"–°—É–±-—Ä–µ–¥–¥–∏—Ç: {meme['subreddit']}"
                )
            except Exception as admin_error:
                logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_error}")
    
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_meme_to_channel: {e}", exc_info=True)

async def start_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
    """
    logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")
    
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
        logger.debug(f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ: {update.effective_chat}")
        logger.debug(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {update.effective_user}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        chat_type = update.effective_chat.type
        logger.info(f"–¢–∏–ø —á–∞—Ç–∞: {chat_type}")
        
        if chat_type != "private":
            logger.warning(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤–Ω–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {update.effective_user.id}")
            await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ /start –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_name = update.effective_user.first_name or "–î—Ä—É–≥"
        start_text = (
            f'üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n'
            'ü§£ –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–µ–º—ã.\n\n'
            'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
            '‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
            '‚Ä¢ /meme - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n'
            '‚Ä¢ /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n'
            '‚Ä¢ /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
            '‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤\n\n'
            f'üöÄ –ú–µ–º—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ: {CHANNEL_ID}'
        )
        
        await update.message.reply_text(start_text)
        logger.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {update.effective_user.id}")
    
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ start_command –¥–ª—è {update.effective_user.id}: {e}", exc_info=True)

def setup_meme_job(application: Application):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
    """
    try:
        async def send_meme_callback(context: CallbackContext):
            """
            –ö–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            """
            logger.info("üïí –ó–∞–ø—É—Å–∫ send_meme_callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞")
            try:
                await send_meme_to_channel(context)
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
                interval_hours = random.uniform(1, 4)
                next_run_time = datetime.now(pytz.utc) + timedelta(hours=interval_hours)
                
                context.job_queue.run_once(
                    send_meme_callback, 
                    interval_hours * 3600, 
                    name='send_meme',  
                    data={'next_run_time': next_run_time}  
                )
                
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –º–µ–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {interval_hours:.1f} —á–∞—Å–æ–≤")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_meme_callback: {e}", exc_info=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        application.job_queue.run_once(
            send_meme_callback, 
            10, 
            name='send_meme',  
            data={'next_run_time': datetime.now(pytz.utc) + timedelta(seconds=10)}
        )
        
        logger.info("‚úÖ –î–∂–æ–± –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∂–æ–±–∞ –¥–ª—è –º–µ–º–æ–≤: {e}", exc_info=True)

async def help_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    logger.info("Received /help command")
    
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∏–ø–∞ —á–∞—Ç–∞
        logger.debug(f"Chat type: {update.effective_chat.type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if update.effective_chat.type != "private":
            logger.warning("Command /help only in private messages")
            await update.message.reply_text("üö´ Command /help is only available in private messages.")
            return

        help_text = (
            'üìã List of commands:\n\n'
            'ü§ñ /start - Start the bot\n'
            'ü§£ /meme - Get a random meme\n'
            'üìã /help - List of all commands\n'
            'üåê /about - Information about the bot\n'
            'üìä /stats - Meme statistics\n\n'
            f'üñºÔ∏è Memes are published in the channel: {CHANNEL_ID}'
        )
        
        await update.message.reply_text(help_text)
    
    except Exception as e:
        logger.error(f"Error in help_command: {e}", exc_info=True)

async def about_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    """
    try:
        def escape_markdown_v2(text):
            """
            –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Markdown V2
            –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Telegram
            """
            if not text:
                return ''
            
            # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
            escape_chars = '_*[]()~`>#+-=|{}.!'
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            escaped_text = ''.join('\\' + char if char in escape_chars else char for char in str(text))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤
            escaped_text = re.sub(r'(?<=\w)\.', r'\\.', escaped_text)
            
            return escaped_text
        
        about_text = (
            "ü§ñ *–ú–µ–º\\-–ë–æ—Ç* üöÄ\n\n"
            "*–í–µ—Ä—Å–∏—è:* 1\\.0\\.0\n"
            "*–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:* @sp1dpwnzero\n\n"
            "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ –ø—Ä–∏–∫–æ–ª—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ–º–æ–≤\\.\n"
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ–º–æ–≤\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
            "–ù–µ —É—Ö–∞—Ö–∞—Ç–∞–π—Å—è\\! üòÑ"
        )
        
        await update.message.reply_markdown_v2(
            about_text, 
            disable_web_page_preview=True
        )
        
        logger.info(f"About command used by {update.effective_user.username}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ about_command: {e}", exc_info=True)
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def stats_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    """
    logger.info("Received /stats command")
    
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∏–ø–∞ —á–∞—Ç–∞
        logger.debug(f"Chat type: {update.effective_chat.type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if update.effective_chat.type != "private":
            logger.warning("Command /stats only in private messages")
            await update.message.reply_text("üö´ Command /stats is only available in private messages.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await update.message.reply_text(
            "üìä Meme statistics:\n\n"
            "üöß Functionality in development\n"
            "ü§ñ Bot is in testing stage"
        )
    
    except Exception as e:
        logger.error(f"Error in stats_command: {e}", exc_info=True)

async def meme_command(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /meme –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞
    """
    try:
        meme = await get_random_meme()
        
        if not meme:
            await update.message.reply_text("üò± –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º")
            return
        
        caption = f"{meme['title']}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"
        
        await update.message.reply_photo(
            photo=meme['url'], 
            caption=caption
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ /meme –∏–∑ {meme['subreddit']}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /meme: {e}", exc_info=True)
        await update.message.reply_text("üò± –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞")

async def handle_command(update: Update, context: CallbackContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    logger.info(f"Unhandled command from {update.effective_user}")
    
    try:
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
    
    except Exception as e:
        logger.error(f"Error in handle_command: {e}", exc_info=True)

async def handle_user_meme(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ–º–æ–≤
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ—ë –≤ –∫–∞–Ω–∞–ª–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not update.message.photo:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–µ–º –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender = update.effective_user
        sender_name = sender.username or f"{sender.first_name} {sender.last_name}".strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        caption_parts = []
        caption_parts.append(f"–î–æ–¥—É–º–∞–ª—Å—è @{sender_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if update.message.caption:
            caption_parts.append(f"\n{update.message.caption}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–≥–∏
        caption_parts.extend([
            "\n–º–¥–∞, —à–∏–∑",
            "@sh1za1337_bot"
        ])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∏
        caption = "\n".join(caption_parts)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º –≤ –∫–∞–Ω–∞–ª
        await context.bot.send_photo(
            chat_id=CHANNEL_ID, 
            photo=file.file_id, 
            caption=caption
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await update.message.reply_text("‚úÖ –ú–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–µ–º –æ—Ç {sender_name} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–º–∞: {e}", exc_info=True)
        await update.message.reply_text("üò± –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–º–∞")

async def time_command(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /time –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–º–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
    """
    logger.info(f"–í—ã–∑–æ–≤ /time –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.username} (ID: {update.effective_user.id})")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if str(update.effective_user.id) != os.getenv('ADMIN_USER_ID'):
            warning_message = (
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –î–û–°–¢–£–ü–ê! ‚ö†Ô∏è\n\n"
                "üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "üëÄ –í—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –õ–û–ì–ò–†–£–Æ–¢–°–Ø –∏ –±—É–¥—É—Ç –ù–ï–ú–ï–î–õ–ï–ù–ù–û –î–û–õ–û–ñ–ï–ù–´.\n"
                "üíÄ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ë–õ–û–ö–ò–†–û–í–ö–ï –∏ –£–ì–û–õ–û–í–ù–û–ô –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò!\n\n"
                "üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–†–ï–ö–†–ê–¢–ò–¢–ï –ü–û–ü–´–¢–ö–ò –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–û–ì–û –î–û–°–¢–£–ü–ê! üö®"
            )
            
            logger.warning(
                f"–í–ù–ò–ú–ê–ù–ò–ï! –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /time. "
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.username} "
                f"(ID: {update.effective_user.id})"
            )
            
            await update.message.reply_text(warning_message)
            return
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.effective_user.username} –≤—ã–∑–≤–∞–ª /time")
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞
        jobs = context.job_queue.jobs()
        meme_job = next((job for job in jobs if job.name == 'send_meme'), None)
        
        if meme_job:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∂–æ–±–∞
            next_run_time = meme_job.data.get('next_run_time') if meme_job.data else datetime.now(pytz.utc)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            remaining_time = next_run_time - datetime.now(pytz.utc)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            hours, remainder = divmod(remaining_time.total_seconds(), 3600)
            minutes, seconds = divmod(remainder, 60)
            
            message = (
                f"‚è∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–º–∞:\n"
                f"üïí –û—Å—Ç–∞–ª–æ—Å—å: {int(hours)} —á. {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫.\n"
                f"üîú –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {next_run_time.astimezone(pytz.timezone('Europe/Moscow'))}"
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–º–∞: {message}")
            await update.message.reply_text(message)
        else:
            logger.warning("–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /time: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")

async def gomeme_command(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /gomeme –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    logger.info(f"–í—ã–∑–æ–≤ /gomeme –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.username} (ID: {update.effective_user.id})")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if str(update.effective_user.id) != os.getenv('ADMIN_USER_ID'):
            warning_message = (
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –î–û–°–¢–£–ü–ê! ‚ö†Ô∏è\n\n"
                "üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "üëÄ –í—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –õ–û–ì–ò–†–£–Æ–¢–°–Ø –∏ –±—É–¥—É—Ç –ù–ï–ú–ï–î–õ–ï–ù–ù–û –î–û–õ–û–ñ–ï–ù–´.\n"
                "üíÄ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ë–õ–û–ö–ò–†–û–í–ö–ï –∏ –£–ì–û–õ–û–í–ù–û–ô –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò!\n\n"
                "üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–†–ï–ö–†–ê–¢–ò–¢–ï –ü–û–ü–´–¢–ö–ò –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–û–ì–û –î–û–°–¢–£–ü–ê! üö®"
            )
            
            logger.warning(
                f"–í–ù–ò–ú–ê–ù–ò–ï! –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /gomeme. "
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.username} "
                f"(ID: {update.effective_user.id})"
            )
            
            await update.message.reply_text(warning_message)
            return
        
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {update.effective_user.username} –≤—ã–∑–≤–∞–ª /gomeme")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º –≤ –∫–∞–Ω–∞–ª
        await send_meme_to_channel(context)
        
        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        setup_meme_job(context.application)
        
        logger.info("–ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        await update.message.reply_text("‚úÖ –ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /gomeme: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    try:
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if not TELEGRAM_TOKEN:
            logger.critical("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info("Bot token status: PRESENT")
        logger.info("Telegram Bot starting...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = (
            Application.builder()
            .token(TELEGRAM_TOKEN)
            .build()
        )
        
        logger.info(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å —Ç–æ–∫–µ–Ω–æ–º: {TELEGRAM_TOKEN[:10]}...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler('start', start_command))
        application.add_handler(CommandHandler('help', help_command))
        application.add_handler(CommandHandler('about', about_command))
        application.add_handler(CommandHandler('stats', stats_command))
        application.add_handler(CommandHandler('meme', meme_command))
        application.add_handler(CommandHandler('time', time_command))
        application.add_handler(CommandHandler('gomeme', gomeme_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        application.add_handler(MessageHandler(filters.COMMAND, handle_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ–º–æ–≤
        application.add_handler(MessageHandler(filters.PHOTO, handle_user_meme))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∂–æ–±–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤
        setup_meme_job(application)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("üöÄ –ù–∞—á–∞–ª–æ polling...")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling(
            drop_pending_updates=True,
            stop_signals=None
        )
    
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        raise

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("üõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
