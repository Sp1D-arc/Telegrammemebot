# –°–∏—Å—Ç–µ–º–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import os
import re
import sys
import random
import logging
import asyncio
import pytz
import asyncio
from datetime import datetime, timedelta

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤
sending_memes = False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
is_command_running = {}  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
import aiohttp
import aiofiles

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Telegram
import telegram
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, JobQueue, CallbackQueryHandler, ConversationHandler
from telegram.error import Conflict, RetryAfter, TimedOut

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Reddit
import asyncpraw
import asyncprawcore

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
from deep_translator import GoogleTranslator

# –†–∞–±–æ—Ç–∞ —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
from dotenv import load_dotenv
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot_debug.log',
    filemode='a'
)
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.setLevel(logging.DEBUG)
logger.handlers.clear()

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ Telegram
async def error_handler(update: object, context: CallbackContext):
    try:
        raise context.error
    except Conflict:
        logger.error("–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π. –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    except RetryAfter as e:
        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç. –û–∂–∏–¥–∞–Ω–∏–µ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)
    except TimedOut:
        logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL
async def check_url_availability(url):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.head(url, timeout=10) as response:
                return response.status == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ URL {url}: {e}")
        return False

# –†–∞–±–æ—Ç–∞ —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
from dotenv import load_dotenv
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot_debug.log',
    filemode='a'
)
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.setLevel(logging.DEBUG)
logger.handlers.clear()

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
file_handler = logging.FileHandler('bot_debug.log', mode='w', encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
REDDIT_CLIENT_ID = os.getenv('REDDIT_CLIENT_ID')
REDDIT_CLIENT_SECRET = os.getenv('REDDIT_CLIENT_SECRET')
REDDIT_USER_AGENT = os.getenv('REDDIT_USER_AGENT')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤
SENT_MEMES = set()
MAX_SENT_MEMES = 500  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–º–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏

async def get_random_meme(subreddit_names=None, limit=200):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AsyncPRAW
    """
    try:
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–º–∞")
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
        import socket
        import ssl
        
        def check_internet_connection():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS
                socket.gethostbyname('www.reddit.com')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                context = ssl.create_default_context()
                with socket.create_connection(("www.reddit.com", 443)) as sock:
                    with context.wrap_socket(sock, server_hostname="www.reddit.com") as secure_sock:
                        logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Reddit")
                return True
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                return False
        
        if not check_internet_connection():
            logger.warning("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Reddit")
            return None
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ Reddit API
        logger.info(f"Reddit Client ID: {os.getenv('REDDIT_CLIENT_ID', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')[:5]}...")
        logger.info(f"Reddit Client Secret: {'*' * 10}")
        logger.info(f"Reddit User Agent: {os.getenv('REDDIT_USER_AGENT', 'TelegramMemeBot/1.5')}")
        
        try:
            reddit = asyncpraw.Reddit(
                client_id=os.getenv('REDDIT_CLIENT_ID'),
                client_secret=os.getenv('REDDIT_CLIENT_SECRET'),
                user_agent=os.getenv('REDDIT_USER_AGENT', 'TelegramMemeBot/1.5')
            )
        except Exception as auth_error:
            logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Reddit: {auth_error}")
            return None
        
        if not subreddit_names:
            subreddit_names = [
                'memes', 'dankmemes', 'funny', 'ru_memes', 'Pikabu'
            ]
        
        logger.info(f"–°–ø–∏—Å–æ–∫ —Å—É–±-—Ä–µ–¥–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {subreddit_names}")
        
        all_memes = []
        for subreddit_name in subreddit_names:
            try:
                subreddit = await reddit.subreddit(subreddit_name)
                hot_memes = []
                async for post in subreddit.hot(limit=limit):
                    if post.url.endswith(('.jpg', '.jpeg', '.png', '.gif')):
                        hot_memes.append(post)
                
                all_memes.extend(hot_memes)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(hot_memes)} –º–µ–º–æ–≤ –∏–∑ {subreddit_name}")
            except asyncprawcore.exceptions.Forbidden as forbidden_error:
                logger.error(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ {subreddit_name}: {forbidden_error}")
            except asyncprawcore.exceptions.NotFound as not_found_error:
                logger.error(f"‚ùå –°—É–±-—Ä–µ–¥–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω {subreddit_name}: {not_found_error}")
            except asyncprawcore.exceptions.RequestException as request_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {subreddit_name}: {request_error}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–æ–≤ –∏–∑ {subreddit_name}: {e}", exc_info=True)
        
        logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ –º–µ–º–æ–≤: {len(all_memes)}")
        
        valid_memes = [
            meme for meme in all_memes 
            if meme.url not in SENT_MEMES
        ]
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –º–µ–º–æ–≤: {len(valid_memes)}")
        
        if not valid_memes:
            logger.warning("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤")
            SENT_MEMES.clear()
            valid_memes = all_memes
        
        if not valid_memes:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ–º—ã")
            return None
        
        selected_meme = random.choice(valid_memes)
        
        # –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –æ–Ω –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        title = selected_meme.title
        translated_title = GoogleTranslator(source='auto', target='ru').translate(title)

        selected_meme.title = translated_title  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        
        SENT_MEMES.add(selected_meme.url)
        
        if len(SENT_MEMES) > MAX_SENT_MEMES:
            logger.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ–º–æ–≤, –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏")
            SENT_MEMES.clear()
        
        logger.info(f"‚úÖ –í—ã–±—Ä–∞–Ω –º–µ–º: {selected_meme.title} –∏–∑ {selected_meme.subreddit}")
        
        return {
            'title': selected_meme.title,
            'url': selected_meme.url,
            'author': selected_meme.author,
            'subreddit': selected_meme.subreddit
        }
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_random_meme: {e}", exc_info=True)
        return None
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é Reddit
        try:
            await reddit.close()
        except Exception:
            pass

async def send_meme_to_channel(context: CallbackContext):
    try:
        logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞")
        meme = await get_random_meme()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–∞
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–∞ —Å URL: {meme['url']}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ URL
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = f"{meme['title']}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"  # –ü–æ–¥–ø–∏—Å—å –¥–ª—è –º–µ–º–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º –≤ –∫–∞–Ω–∞–ª —Å –ø–æ–¥–ø–∏—Å—å—é
        await context.bot.send_photo(
            chat_id=CHANNEL_ID, 
            photo=meme['url'], 
            caption=caption
        )
        
        logger.info("‚úÖ –ú–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–º–∞: {e}", exc_info=True)

async def start_command(update: Update, context: CallbackContext):
    try:
        if update.message.text.startswith('/start'):
            keyboard = [
                ["/Hentai", "/Warhammer"],
                ["/Dota"],
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=reply_markup)
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ start_command –¥–ª—è {update.effective_user.id}: {e}", exc_info=True)

async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'get_meme':
        await meme_command(query.message, context)
    elif query.data == 'stats':
        await stats_command(query.message, context)

def setup_meme_job(application: Application):
    # –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–º–æ–≤
    pass

async def help_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    logger.info("Received /help command")
    
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∏–ø–∞ —á–∞—Ç–∞
        logger.debug(f"Chat type: {update.effective_chat.type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if update.effective_chat.type != "private":
            logger.warning("Command /help only in private messages")
            await update.message.reply_text("üö´ Command /help is only available in private messages.")
            return

        help_text = (
            "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
            "ü§ñ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "ü§£ /meme - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n"
            "üìã /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
            "üåê /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
            "üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤\n\n"
            "üñºÔ∏è –ú–µ–º—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ: @Sp1DShiz\n\n"
            "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
            "/start_memes - –ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–º–æ–≤ –≤ –∫–∞–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).\n"
            "/stop_memes - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–º–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."
        )
        
        await update.message.reply_text(help_text)
    
    except Exception as e:
        logger.error(f"Error in help_command: {e}", exc_info=True)

async def about_command(update: Update, context: CallbackContext):
    await update.message.reply_text("ü§ñ *–ú–µ–º-–ë–æ—Ç* üöÄ\n\n" 
    "‚ú® –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 2.0\n" 
    "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @sp1dpwnzero\n\n" 
    "üìú –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ –∏–∑ Reddit.\n" 
    "üéâ –§—É–Ω–∫—Ü–∏–∏:\n" 
    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ–º–æ–≤ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n" 
    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–æ–≤ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n" 
    "‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n" 
    "üòÑ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! \n\n"
    "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è, –Ω–æ —ç—Ç–æ –∏—Ö –≤–∏–Ω–∞.")

async def stats_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    """
    logger.info("Received /stats command")
    
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∏–ø–∞ —á–∞—Ç–∞
        logger.debug(f"Chat type: {update.effective_chat.type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if update.effective_chat.type != "private":
            logger.warning("Command /stats only in private messages")
            await update.message.reply_text("üö´ Command /stats is only available in private messages.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await update.message.reply_text(
            "üìä Meme statistics:\n\n"
            "üöß Functionality in development\n"
            "ü§ñ Bot is in testing stage"
        )
    
    except Exception as e:
        logger.error(f"Error in stats_command: {e}", exc_info=True)

import random

async def meme_command(update: Update, context: CallbackContext):
    try:
        chat_type = update.message.chat.type
        if chat_type == 'group' or chat_type == 'supergroup':
            messages = [
                "üîí –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É –º–µ–º–æ–≤..."
            ]
            await update.message.reply_text(random.choice(messages))
        else:
            await update.message.reply_text("–ú–µ–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        meme = await get_random_meme()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–∞
        if meme:
            if not meme['url'].endswith(('.png', '.jpg', '.jpeg', '.gif')):
                await update.message.reply_text("‚ùå –ü–æ–ª—É—á–µ–Ω–Ω—ã–π URL –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
                return
            caption = f"{meme['title']}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"
            await update.message.reply_photo(
                photo=meme['url'],
                caption=caption
            )
            if chat_type != 'group' and chat_type != 'supergroup':
                await update.message.reply_text("‚úÖ –ú–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /meme: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞")

async def handle_command(update: Update, context: CallbackContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    logger.info(f"Unhandled command from {update.effective_user}")
    
    try:
        if update.message.text.startswith('/start'):
            await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –º–µ–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /meme –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–º–æ–≤.")
        elif update.message.text.startswith('/stop_memes'):
            await stop_memes_command(update, context)
        elif update.message.text.startswith('/start_memes'):
            await start_memes_command(update, context)
        else:
            await update.message.reply_text(
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
    
    except Exception as e:
        logger.error(f"Error in handle_command: {e}", exc_info=True)

async def handle_user_meme(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ–º–æ–≤
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ—ë –≤ –∫–∞–Ω–∞–ª–µ
    """
    try:
        if not update.message.photo:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–µ–º –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        sender = update.effective_user
        sender_name = sender.username or f"{sender.first_name} {sender.last_name}".strip()
        
        caption_parts = []
        caption_parts.append(f"–î–æ–¥—É–º–∞–ª—Å—è @{sender_name}")
        
        if update.message.caption:
            caption_parts.append(f"\n{update.message.caption}")
        
        caption_parts.extend([
            "\n–º–¥–∞, —à–∏–∑",
            "@sh1za1337_bot"
        ])
        
        caption = "\n".join(caption_parts)
        
        await context.bot.send_photo(
            chat_id=CHANNEL_ID, 
            photo=file.file_id, 
            caption=caption
        )
        
        await update.message.reply_text("‚úÖ –ú–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–µ–º –æ—Ç {sender_name} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–º–∞: {e}", exc_info=True)
        await update.message.reply_text("üò± –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–º–∞")

async def time_command(update: Update, context: CallbackContext):
    try:
        if str(update.effective_user.id) != os.getenv('ADMIN_USER_ID'):
            await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        jobs = context.job_queue.jobs()
        meme_job = next((job for job in jobs if job.name == 'send_meme'), None)
        
        if meme_job:
            next_run_time = meme_job.data.get('next_run_time', datetime.now(pytz.utc))
            
            remaining_time = next_run_time - datetime.now(pytz.utc)
            
            hours, remainder = divmod(remaining_time.total_seconds(), 3600)
            minutes, seconds = divmod(remainder, 60)
            
            message = (
                f"‚è∞ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–º–∞:\n"
                f"üïí –û—Å—Ç–∞–ª–æ—Å—å: {int(hours)} —á. {int(minutes)} –º–∏–Ω. {int(seconds)} —Å–µ–∫.\n"
                f"üîú –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {next_run_time.astimezone(pytz.timezone('Europe/Moscow'))}"
            )
            
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("‚ùå –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /time: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")

async def gomeme_command(update: Update, context: CallbackContext):
    try:
        if str(update.effective_user.id) != os.getenv('ADMIN_USER_ID'):
            warning_message = (
                "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –î–û–°–¢–£–ü–ê! ‚ö†Ô∏è\n\n"
                "üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "üëÄ –í—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –õ–û–ì–ò–†–£–Æ–¢–°–Ø –∏ –±—É–¥—É—Ç –ù–ï–ú–ï–î–õ–ï–ù–ù–û –î–û–õ–û–ñ–ï–ù–´.\n"
                "üíÄ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ë–õ–û–ö–ò–†–û–í–ö–ï –∏ –£–ì–û–õ–û–í–ù–û–ô –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò!\n\n"
                "üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–†–ï–ö–†–ê–¢–ò–¢–ï –ü–û–ü–´–¢–ö–ò –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–û–ì–û –î–û–°–¢–£–ü–ê! üö®"
            )
            logger.warning(
                f"–í–ù–ò–ú–ê–ù–ò–ï! –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /gomeme. "
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.username} (ID: {update.effective_user.id})"
            )
            await update.message.reply_text(warning_message)
            return
        meme = await get_random_meme()
        if not meme:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º")
            return
        caption = f"{meme['title']}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=meme['url'],
            caption=caption
        )
        await update.message.reply_text("‚úÖ –ú–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /gomeme: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º")

async def send_memes(context: CallbackContext):
    global sending_memes
    logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤...")
    while sending_memes:
        meme = await get_random_meme()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–º–∞
        if meme:
            caption = f"{meme['title']}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"  # –ü–æ–¥–ø–∏—Å—å –¥–ª—è –º–µ–º–∞
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–∞: {meme['title']}")
            await context.bot.send_photo(
                chat_id=CHANNEL_ID, 
                photo=meme['url'], 
                caption=caption
            )
            logger.info(f"–ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {meme['title']}")
        await asyncio.sleep(random.randint(3600, 14400))  # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–∞ –∫–∞–∂–¥—ã–µ 1-4 —á–∞—Å–∞

async def start_memes_command(update: Update, context: CallbackContext):
    global sending_memes
    admin_id = os.getenv('ADMIN_USER_ID')  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != int(admin_id):
        warning_message = (
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –î–û–°–¢–£–ü–ê! ‚ö†Ô∏è\n\n"
            "üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "üëÄ –í—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –õ–û–ì–ò–†–£–Æ–¢–°–Ø –∏ –±—É–¥—É—Ç –ù–ï–ú–ï–î–õ–ï–ù–ù–û –î–û–õ–û–ñ–ï–ù–´.\n"
            "üíÄ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ë–õ–û–ö–ò–†–û–í–ö–ï –∏ –£–ì–û–õ–û–í–ù–û–ô –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò!\n\n"
            "üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–†–ï–ö–†–ê–¢–ò–¢–ï –ü–û–ü–´–¢–ö–ò –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–û–ì–û –î–û–°–¢–£–ü–ê! üö®"
        )
        logger.warning(
            f"–í–ù–ò–ú–ê–ù–ò–ï! –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /start_memes. "
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.username} (ID: {update.effective_user.id})"
        )
        await update.message.reply_text(warning_message)
        return

    if not sending_memes:
        sending_memes = True
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–º–æ–≤!")
        asyncio.create_task(send_memes(context))  # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–º–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    else:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–æ–≤ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")

async def stop_memes_command(update: Update, context: CallbackContext):
    global sending_memes
    admin_id = os.getenv('ADMIN_USER_ID')  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != int(admin_id):
        warning_message = (
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –î–û–°–¢–£–ü–ê! ‚ö†Ô∏è\n\n"
            "üîí –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "üëÄ –í—Å–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –õ–û–ì–ò–†–£–Æ–¢–°–Ø –∏ –±—É–¥—É—Ç –ù–ï–ú–ï–î–õ–ï–ù–ù–û –î–û–õ–û–ñ–ï–ù–´.\n"
            "üíÄ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ë–õ–û–ö–ò–†–û–í–ö–ï –∏ –£–ì–û–õ–û–í–ù–û–ô –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò!\n\n"
            "üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û –ü–†–ï–ö–†–ê–¢–ò–¢–ï –ü–û–ü–´–¢–ö–ò –ù–ï–°–ê–ù–ö–¶–ò–û–ù–ò–†–û–í–ê–ù–ù–û–ì–û –î–û–°–¢–£–ü–ê! üö®"
        )
        logger.warning(
            f"–í–ù–ò–ú–ê–ù–ò–ï! –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /stop_memes. "
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.username} (ID: {update.effective_user.id})"
        )
        await update.message.reply_text(warning_message)
        return

    sending_memes = False
    await update.message.reply_text("–û—Å—Ç–∞–Ω–æ–≤–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–º–æ–≤.")

async def help_command(update: Update, context: CallbackContext):
    help_text = (
        "üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n"
        "ü§ñ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "ü§£ /meme - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n"
        "üìã /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
        "üåê /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤\n\n"
        "üñºÔ∏è –ú–µ–º—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ: @Sp1DShiz\n\n"
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        "/start_memes - –ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–º–æ–≤ –≤ –∫–∞–Ω–∞–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤).\n"
        "/stop_memes - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–º–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)."
    )
    await update.message.reply_text(help_text)

import random

async def create_meme_command(update: Update, context: CallbackContext):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞:")
    context.user_data['awaiting_meme_text'] = True

async def handle_message(update: Update, context: CallbackContext):
    if context.user_data.get('awaiting_meme_text'):
        meme_text = update.message.text
        context.user_data['meme_text'] = meme_text
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞:")
        context.user_data['awaiting_meme_text'] = False
        context.user_data['awaiting_meme_image'] = True
    elif context.user_data.get('awaiting_meme_image'):
        image_file = update.message.photo[-1].file_id
        new_file = await context.bot.get_file(image_file)
        await new_file.download_to_drive('temp_image.jpg')

        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä
        meme_text = context.user_data['meme_text']
        image = Image.open('temp_image.jpg')
        draw = ImageDraw.Draw(image)
        font = ImageFont.load_default()
        draw.text((10, 10), meme_text, fill="white", font=font)
        image.save('demotivator.jpg')

        await update.message.reply_photo(photo=open('demotivator.jpg', 'rb'))
        context.user_data['awaiting_meme_image'] = False
        os.remove('temp_image.jpg')
        os.remove('demotivator.jpg')

async def fun_fact_command(update: Update, context: CallbackContext):
    fact = random.choice(fun_facts)
    await update.message.reply_text(f"–í–æ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç: {fact}")

async def discuss_command(update: Update, context: CallbackContext):
    await update.message.reply_text("–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π –º–µ–º? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!")

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
from telegram import ReplyKeyboardMarkup

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TEXT, PHOTO = range(2)

async def creatememe_command(update: Update, context: CallbackContext):
    await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞.")
    return TEXT

async def handle_text(update: Update, context: CallbackContext):
    context.user_data['meme_text'] = update.message.text
    await update.message.reply_text("üñºÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞.")
    return PHOTO

async def handle_photo(update: Update, context: CallbackContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_path = f"temp_{update.effective_user.id}.jpg"
    await file.download_to_drive(image_path)
    
    # –°–æ–∑–¥–∞—ë–º –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä
    meme_text = context.user_data.get('meme_text', '–ú–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞')
    output_path = f"demotivator_{update.effective_user.id}.jpg"
    create_demotivator(image_path, meme_text, output_path)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    with open(output_path, 'rb') as photo:
        await update.message.reply_photo(photo=photo)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    os.remove(image_path)
    os.remove(output_path)
    
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ConversationHandler –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def setup_creatememe_handler(application):
    creatememe_handler = ConversationHandler(
        entry_points=[CommandHandler('creatememe', creatememe_command)],
        states={
            TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)],
            PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    application.add_handler(creatememe_handler)

async def publish_meme_command(update: Update, context: CallbackContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–º–∞ –∏–∑ user_data
        meme_text = context.user_data.get('meme_text', '–ú–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞')
        
        # –ü–æ–ª—É—á–∞–µ–º URL –º–µ–º–∞ –∏–∑ user_data –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        meme_url = context.user_data.get('meme_url', None)
        
        if not meme_url:
            await update.message.reply_text("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –º–µ–º —Å –ø–æ–º–æ—â—å—é /creatememe.")
            return
        
        # –ü—É–±–ª–∏–∫—É–µ–º –º–µ–º –≤ –∫–∞–Ω–∞–ª
        await context.bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=meme_url,
            caption=meme_text
        )
        
        await update.message.reply_text("‚úÖ –ú–µ–º —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–º–∞: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–º–∞.")

async def warhammer_meme_command(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if chat_id in is_command_running and is_command_running[chat_id]:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    is_command_running[chat_id] = True
    try:
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É...")
        meme = await get_random_meme(subreddit_names=['Warhammer'])
        if meme:
            caption = f"{meme.get('title', '–ó–∞ –ò–º–ø–µ—Ä–∞—Ç–æ—Ä–∞?')}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"
            await update.message.reply_photo(
                photo=meme['url'],
                caption=caption
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º –∏–∑ —Å–∞–±—Ä–µ–¥–¥–∏—Ç–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /warhammer_meme: {e}", exc_info=True)
        await update.message.reply_text("üò± –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞.")
    finally:
        is_command_running[chat_id] = False

async def hentai_meme_command(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if chat_id in is_command_running and is_command_running[chat_id]:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    is_command_running[chat_id] = True
    try:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å —Å–∞–º–æ–µ –≤–∫—É—Å–Ω–æ–µ...")
        meme = await get_random_meme(subreddit_names=['Hentai'])
        if isinstance(meme, dict) and 'url' in meme:
            caption = f"{meme.get('title', '–£—Ñ, –≤–æ—Ç —ç—Ç–æ —Ö–µ–Ω—Ç–∞–π! üòè')}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"
            await update.message.reply_photo(photo=meme['url'], caption=caption)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º –∏–∑ —Å–∞–±—Ä–µ–¥–¥–∏—Ç–∞ Hentai.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}", exc_info=True)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
        try:
            await update.message.delete()
        except Exception as delete_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    finally:
        is_command_running[chat_id] = False

async def dota_meme_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if chat_id in is_command_running and is_command_running[chat_id]:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    is_command_running[chat_id] = True
    try:
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É...")
        meme = await get_random_meme(subreddit_names=['dota'])
        if meme:
            caption = f"{meme.get('title', '5 –º–∞–∂–æ—Ä–æ–≤ –≤—ã–π–≥—Ä–∞–ª?')}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"  # –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è Dota
            try:
                await update.message.reply_photo(
                    photo=meme['url'],
                    caption=caption
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}", exc_info=True)
                if update.message:
                    await update.message.delete()
                await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º –∏–∑ —Å–∞–±—Ä–µ–¥–¥–∏—Ç–∞ Dota.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}", exc_info=True)
        if update.message:
            try:
                await update.message.delete()
            except Exception as delete_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}", exc_info=True)
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    finally:
        is_command_running[chat_id] = False

async def reff_command(update: Update, context: CallbackContext):
    pass

import textwrap
from PIL import Image, ImageDraw, ImageFont

def create_demotivator(image_path, text, output_path):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image = Image.open(image_path)
    width, height = image.size
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏
    demotivator = Image.new('RGB', (width + 80, height + 180), color='black')
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    demotivator.paste(image, (40, 40))  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    draw = ImageDraw.Draw(demotivator)
    font_path = "fonts/Roboto-BlackItalic.ttf"  # –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —à—Ä–∏—Ñ—Ç–∞
    font = ImageFont.truetype(font_path, 56)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ 56
    text_bbox = draw.textbbox((0, 0), text, font=font)
    text_width = text_bbox[2] - text_bbox[0]  # –®–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
    text_height = text_bbox[3] - text_bbox[1]  # –í—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if text_width > (width - 80):
        wrapped_text = textwrap.fill(text, width=30)  # 30 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–æ–∫—É
    else:
        wrapped_text = text
    
    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
    draw.text(
        ((width + 80 - text_width) // 2, height + 60),  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        wrapped_text,
        fill="white",
        font=font
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä
    demotivator.save(output_path)

def main():
    logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    if not TELEGRAM_TOKEN:
        logger.critical("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        raise ValueError("–¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω")
    logger.info("Bot token status: PRESENT")
    logger.info("Telegram Bot starting...")
    application = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .build()
    )
    logger.info(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å —Ç–æ–∫–µ–Ω–æ–º: {TELEGRAM_TOKEN[:10]}...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start_command))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('about', about_command))
    application.add_handler(CommandHandler('stats', stats_command))
    application.add_handler(CommandHandler('meme', meme_command))
    application.add_handler(CommandHandler('time', time_command))
    application.add_handler(CommandHandler('gomeme', gomeme_command))
    application.add_handler(CommandHandler('start_memes', start_memes_command))
    application.add_handler(CommandHandler('stop_memes', stop_memes_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞
    setup_creatememe_handler(application)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–º–∞
    application.add_handler(CommandHandler('publishmeme', publish_meme_command))
    
    application.add_handler(CommandHandler('hentai', hentai_meme_command))
    application.add_handler(CommandHandler('warhammer', warhammer_meme_command))
    application.add_handler(CommandHandler('dota', dota_meme_command))

    application.add_error_handler(error_handler)
    logger.info("üöÄ –ù–∞—á–∞–ª–æ polling...")
    application.run_polling(
        drop_pending_updates=True,
        stop_signals=None
    )

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("üõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
