import os
import asyncio
import logging
import sys
import praw
import random
import re
from datetime import datetime, timedelta
import pytz
from dotenv import load_dotenv
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, JobQueue

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
logger.handlers.clear()

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
file_handler = logging.FileHandler('bot_debug.log', mode='w', encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.DEBUG)
console_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
REDDIT_CLIENT_ID = os.getenv('REDDIT_CLIENT_ID')
REDDIT_CLIENT_SECRET = os.getenv('REDDIT_CLIENT_SECRET')
REDDIT_USER_AGENT = os.getenv('REDDIT_USER_AGENT')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Reddit API
reddit = praw.Reddit(
    client_id=REDDIT_CLIENT_ID,
    client_secret=REDDIT_CLIENT_SECRET,
    user_agent=REDDIT_USER_AGENT
)

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞
print(f"üïπÔ∏è –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {TELEGRAM_TOKEN[:5]}...{TELEGRAM_TOKEN[-5:] if TELEGRAM_TOKEN else '–¢–û–ö–ï–ù –ù–ï –ù–ê–ô–î–ï–ù'}")
logger.info(f"Bot token status: {'PRESENT' if TELEGRAM_TOKEN else 'MISSING'}")

def get_random_meme(subreddit_names=None, limit=200):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞
    """
    if subreddit_names is None:
        subreddit_names = [
            'ru_memes', 'memes', 'dankmemes', 'funny', 
            'anime_irl', 'hornymemes', 'Warhammer40k', 
            'animememes', 'waifuism', 'grimdank'
        ]
    
    try:
        all_memes = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –º–µ–º—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–∞–±—Ä–µ–¥–¥–∏—Ç–æ–≤
        for subreddit_name in subreddit_names:
            try:
                subreddit = reddit.subreddit(subreddit_name)
                memes = list(subreddit.hot(limit=limit//len(subreddit_names)))
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ–º–æ–≤ (—Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏)
                filtered_memes = [
                    meme for meme in memes 
                    if (meme.url.endswith(('.jpg', '.png', '.jpeg', '.gif')) 
                        and not meme.over_18
                    )
                ]
                
                all_memes.extend(filtered_memes)
            
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–æ–≤ –∏–∑ {subreddit_name}: {e}")
        
        if not all_memes:
            logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ–º–æ–≤")
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ–º —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–≥–æ –æ—Ç–±–æ—Ä–∞
        selected_meme = random.choices(
            all_memes[:50],  # –ë–µ—Ä–µ–º —Ç–æ–ø-50 –º–µ–º–æ–≤
            weights=[1 / (i + 1) for i in range(50)]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
        )[0]
        
        return {
            'title': selected_meme.title,
            'url': selected_meme.url,
            'author': selected_meme.author.name,
            'subreddit': selected_meme.subreddit.display_name
        }
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–º–∞: {e}", exc_info=True)
        return None

async def send_meme_to_channel(context: CallbackContext):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ –≤ –∫–∞–Ω–∞–ª
    """
    try:
        meme = get_random_meme()
        
        if not meme:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º")
            return
        
        caption = f"{meme['title']}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"
        
        await context.bot.send_photo(
            chat_id=CHANNEL_ID, 
            photo=meme['url'], 
            caption=caption
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–º –∏–∑ {meme['subreddit']}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞: {e}", exc_info=True)

async def start_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    print("üîç –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
    logger.info("Received /start command")
    
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∏–ø–∞ —á–∞—Ç–∞
        print(f"üí¨ –¢–∏–ø —á–∞—Ç–∞: {update.effective_chat.type}")
        logger.debug(f"Chat type: {update.effective_chat.type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if update.effective_chat.type != "private":
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ /start —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ /start –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_name = update.effective_user.first_name
        start_text = (
            f'üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n'
            'ü§£ –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–µ–º—ã.\n\n'
            'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
            '‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
            '‚Ä¢ /meme - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n'
            '‚Ä¢ /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n'
            '‚Ä¢ /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
            '‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤\n\n'
            f'üöÄ –ú–µ–º—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ: {CHANNEL_ID}'
        )
        
        await update.message.reply_text(start_text)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {e}")
        logger.error(f"Error in start_command: {e}", exc_info=True)

async def help_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    print("üîç –ö–æ–º–∞–Ω–¥–∞ /help –ø–æ–ª—É—á–µ–Ω–∞")
    logger.info("Received /help command")
    
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∏–ø–∞ —á–∞—Ç–∞
        print(f"üí¨ –¢–∏–ø —á–∞—Ç–∞: {update.effective_chat.type}")
        logger.debug(f"Chat type: {update.effective_chat.type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if update.effective_chat.type != "private":
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ /help —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ /help –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
            return

        help_text = (
            'üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n'
            'ü§ñ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
            'ü§£ /meme - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n'
            'üìã /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n'
            'üåê /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
            'üìä /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤\n\n'
            'üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É –±–æ—Ç—É - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ–º –≤ –∫–∞–Ω–∞–ª–µ'
        )
        
        await update.message.reply_text(help_text)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ help_command: {e}")
        logger.error(f"Error in help_command: {e}", exc_info=True)

async def about_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    """
    try:
        def escape_markdown_v2(text):
            """
            –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Markdown V2
            –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Telegram
            """
            if not text:
                return ''
            
            # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
            escape_chars = '_*[]()~`>#+-=|{}.!'
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
            escaped_text = ''.join('\\' + char if char in escape_chars else char for char in str(text))
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ —Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤
            escaped_text = re.sub(r'(?<=\w)\.', r'\\.', escaped_text)
            
            return escaped_text
        
        about_text = (
            "ü§ñ *–ú–µ–º\\-–ë–æ—Ç* üöÄ\n\n"
            "*–í–µ—Ä—Å–∏—è:* 1\\.0\\.0\n"
            "*–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:* @sp1dpwnzero\n\n"
            "–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ –ø—Ä–∏–∫–æ–ª—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ–º–æ–≤\\.\n"
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ–º–æ–≤\n"
            "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã\n\n"
            "–ù–µ —É—Ö–∞—Ö–∞—Ç–∞–π—Å—è\\! üòÑ"
        )
        
        await update.message.reply_markdown_v2(
            about_text, 
            disable_web_page_preview=True
        )
        
        logger.info(f"About command used by {update.effective_user.username}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ about_command: {e}", exc_info=True)
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def stats_command(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    """
    print("üîç –ö–æ–º–∞–Ω–¥–∞ /stats –ø–æ–ª—É—á–µ–Ω–∞")
    logger.info("Received /stats command")
    
    try:
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–∏–ø–∞ —á–∞—Ç–∞
        print(f"üí¨ –¢–∏–ø —á–∞—Ç–∞: {update.effective_chat.type}")
        logger.debug(f"Chat type: {update.effective_chat.type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if update.effective_chat.type != "private":
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ /stats —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
            await update.message.reply_text("üö´ –ö–æ–º–∞–Ω–¥–∞ /stats –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await update.message.reply_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤:\n\n"
            "üöß –§—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
            "ü§ñ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        )
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ stats_command: {e}")
        logger.error(f"Error in stats_command: {e}", exc_info=True)

async def meme_command(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /meme –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞
    """
    try:
        meme = get_random_meme()
        
        if not meme:
            await update.message.reply_text("üò± –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º")
            return
        
        caption = f"{meme['title']}\n\n–º–¥–∞, —à–∏–∑\n@sh1za1337_bot"
        
        await update.message.reply_photo(
            photo=meme['url'], 
            caption=caption
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ /meme –∏–∑ {meme['subreddit']}")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /meme: {e}", exc_info=True)
        await update.message.reply_text("üò± –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞")

async def handle_command(update: Update, context: CallbackContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    print("üîç –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    logger.info(f"Unhandled command from {update.effective_user}")
    
    try:
        await update.message.reply_text(
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_command: {e}")
        logger.error(f"Error in handle_command: {e}", exc_info=True)

async def handle_user_meme(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ–º–æ–≤
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ—ë –≤ –∫–∞–Ω–∞–ª–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if not update.message.photo:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–µ–º –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        sender = update.effective_user
        sender_name = sender.username or f"{sender.first_name} {sender.last_name}".strip()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        caption_parts = []
        caption_parts.append(f"–î–æ–¥—É–º–∞–ª—Å—è @{sender_name}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if update.message.caption:
            caption_parts.append(f"\n{update.message.caption}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–µ–≥–∏
        caption_parts.extend([
            "\n–º–¥–∞, —à–∏–∑",
            "@sh1za1337_bot"
        ])
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∏
        caption = "\n".join(caption_parts)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º –≤ –∫–∞–Ω–∞–ª
        await context.bot.send_photo(
            chat_id=CHANNEL_ID, 
            photo=file.file_id, 
            caption=caption
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await update.message.reply_text("‚úÖ –ú–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –º–µ–º –æ—Ç {sender_name} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–º–∞: {e}", exc_info=True)
        await update.message.reply_text("üò± –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–º–∞")

def setup_meme_job(application: Application):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–∞
        async def send_meme_callback(context: CallbackContext):
            await send_meme_to_channel(context)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            interval_hours = random.uniform(1, 4)
            context.job_queue.run_once(send_meme_callback, interval_hours * 3600)
            
            logger.info(f"–°–ª–µ–¥—É—é—â–∏–π –º–µ–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ {interval_hours:.1f} —á–∞—Å–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        application.job_queue.run_once(send_meme_callback, 10)
        
        logger.info("–î–∂–æ–± –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∂–æ–±–∞ –¥–ª—è –º–µ–º–æ–≤: {e}", exc_info=True)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info("Telegram Bot starting...")

    if not TELEGRAM_TOKEN:
        logger.critical("‚ùå Telegram bot token is missing! Please set TELEGRAM_TOKEN in .env")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        # –í–∫–ª—é—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫
        logging.getLogger('telegram').setLevel(logging.DEBUG)
        logging.getLogger('httpx').setLevel(logging.DEBUG)
        logging.getLogger('httpcore').setLevel(logging.DEBUG)

        application = (
            Application.builder()
            .token(TELEGRAM_TOKEN)
            .get_updates_read_timeout(30)
            .get_updates_write_timeout(30)
            .get_updates_connect_timeout(30)
            .job_queue(JobQueue())  # –î–æ–±–∞–≤–ª—è–µ–º job queue
            .build()
        )
        logger.info(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å —Ç–æ–∫–µ–Ω–æ–º: {TELEGRAM_TOKEN[:5]}...")
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}", exc_info=True)
        sys.exit(1)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("about", about_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("meme", meme_command))
    application.add_handler(MessageHandler(filters.COMMAND, handle_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_user_meme))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("meme", "–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º"),
        BotCommand("help", "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"),
        BotCommand("about", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–º–æ–≤")
    ]

    setup_meme_job(application)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info("üöÄ –ù–∞—á–∞–ª–æ polling...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        application.run_polling(
            drop_pending_updates=True, 
            read_timeout=30,
            write_timeout=30,
            connect_timeout=30,
            poll_interval=1.0  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–ø—Ä–æ—Å–∞
        )
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("üõë –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
