# –ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–æ–≤

from telegram import Update
from telegram.ext import CallbackContext, ConversationHandler
import logging
import os

logger = logging.getLogger(__name__)

TEXT, PHOTO = range(2)

async def create_meme(update, context):
    # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–º–∞
    pass

async def creatememe_command(update: Update, context: CallbackContext):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /creatememe")
    await update.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞.")
    return TEXT

async def handle_text(update: Update, context: CallbackContext):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è handle_text")
    context.user_data['meme_text'] = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –º–µ–º–∞: {update.message.text}")
    await update.message.reply_text("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞.")
    context.user_data['awaiting_meme_image'] = True
    logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ 'awaiting_meme_image' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ True")
    return PHOTO

async def handle_photo(update: Update, context: CallbackContext):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è handle_photo")
    try:
        if update.message.photo:
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
            photo = update.message.photo[-1]
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {photo.file_id}")
            file = await context.bot.get_file(photo.file_id)
            logger.info(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω: {file.file_id}")
            image_path = f"temp_{update.effective_user.id}.jpg"
            await file.download_to_drive(image_path)
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            meme_text = context.user_data.get('meme_text', '–ú–µ–º –±–µ–∑ —Ç–µ–∫—Å—Ç–∞')
            output_path = f"demotivator_{update.effective_user.id}.jpg"
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞ —Å —Ç–µ–∫—Å—Ç–æ–º: {meme_text}")
            create_demotivator(image_path, meme_text, output_path)
            logger.info(f"–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
            with open(output_path, 'rb') as photo:
                await update.message.reply_photo(photo=photo)
            logger.info(f"–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {update.effective_user.id}")
            logger.info("–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
            os.remove(image_path)
            os.remove(output_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        else:
            logger.warning("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    return ConversationHandler.END
